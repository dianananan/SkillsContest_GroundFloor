#ifndef __DATA_BASE_H
#define __DATA_BASE_H

#include <stdio.h>
#include "sys.h"
#include "stm32f4xx.h"


#define Up_Track_Speed	3     //定义寻迹数据返回时间间隔 单位ms 
#define PATHLEN		9		//长度
#define SENDNUM		8		
#define TASKLEN		15    

#define CMD_QR_READ		0x01			//二维码
#define CMD_ZG_DOOR		0x02			//道闸
#define CMD_ZG_SEG		0x03			//数码管
#define CMD_PLATE_READ  0x04			//车牌
#define CMD_SHAPE_READ  0x05			//图形识别
//#define CMD_TRAFFIC_READ  0x06			//交通灯
#define CMD_VOICE		0x07			//语音交互
#define CMD_MAGLEV		0x08			//磁悬浮
#define CMD_ETC			0x09			//ETC
#define CMD_DISTANCE	0x0A			//距离
#define CMD_AVG			0x0B			//AVG
#define CMD_GETPOICK	0x0C			//出库
#define CMD_GETPOINT1	0x0D			//入库
#define CMD_REV_POINT	0x0E			//wifi接收坐标点
#define CMD_TFT_SHOW	0x0F			//TFT显示
#define CMD_ZG_DOORCP	0x10			//向道闸发送车牌
#define CMD_LIGHT_READ	0x11			//新版交通
#define PICTURES_CHOOSE 0x12			//图片选择

#define HW_LIGHT 		0x20			//光源调档
#define HW_LIGHTRE		0x21			//返回光源当前挡位
#define HW_PLATESHOW	0x22			//立体显示车牌
#define HW_TENNEL		0x23			//隧道排风
#define HW_PICUP		0x24			//图片上翻
#define	HW_PICDOWN		0x25			//图片下翻
#define HW_OPENBJQ		0x26			//打开报警器
#define	HW_CLOSEBJQ		0x27			//关闭报警器
#define HW_TYPESHOW		0x28			//立体显示图形
#define STOP_THIS		0x29			//停止  
#define HW_DISSHOW		0x2A			//立体显示距离
#define HW_HUESHOW		0x2B			//立体显示颜色
#define HW_LKSHOW		0x2C			//立体显示路况
#define HW_LASTSHOW		0x2D			//立体显示默认
//#define HW_DISTANCE					CMD_DISTANCE 		//发送距离到立体显示 （18）

#define DELAY			0x40			//延时
#define LED_L_OPEN		0x41			//打开左边转向灯
#define LED_L_CLOSE		0x42			//关闭左边转向灯
#define LED_R_OPEN		0x43			//打开右边转向灯
#define LED_R_CLOSE		0x44			//关闭右边转向灯
#define LED_OPEN		0x45			//打开左右转向灯
#define LED_CLOSE		0x46			//关闭左右转向灯
#define BEEP_OPEN		0x47			//打开蜂鸣器
#define BEEP_CLOSE		0x48			//关闭蜂鸣器
#define CMD_GETPOINT	0x49			//超声波探距
#define UPRIGHT			0x4A			//矫正当前点
		

//static u8 commonData[8] = {0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xf0};			//通用数据发送协议 作为需要发送某个值给上层使用

//static u8 H_S[4]={0x80,0x7F,0x05,~(0x05)};	 //LED照片上翻
//static u8 H_X[4]={0x80,0x7F,0x1B,~(0x1B)};	 //LED照片下翻
//static u8 H_SD[4]={0x00,0xFF,0x45,~(0x45)};	  //隧道风扇系统打开

static u8 H_N[3][4]={{0x00,0xFF,0x0C,~(0x0C)},	 //光源档位加1
											{0x00,0xFF,0x18,~(0x18)}, //光源档位加2
											{0x00,0xFF,0x5E,~(0x5E)}  //光源档位加3
											};	

static u8 HW_K[6]={0x03,0x05,0x14,0x45,0xDE,0x92};  //报警器打开
static u8 HW_G[6]={0x67,0x34,0x78,0xA2,0xFD,0x27};	//报警器关闭

static u8 CP_SHOW1[6] = {0xFF, 0x20, 0x00, 0x00, 0x00, 0x00}; //接收前四位车牌信息模式（后四位）
static u8 CP_SHOW2[6] = {0xFF, 0x10, 0x00, 0x00, 0x47, 0x31}; //接收后两位车牌信息模式（前两位车牌数据）（后两位 横坐标，纵坐标）
static u8 SD_JL[6] ={0xFF,0x11,0x38,0x39,0x00,0x00};   //立体显示距离（十位，个位，00，00）
static u8 CP_G1[6] ={0xFF,0x12,0x02,0x00,0x00,0x00};   //立体显示图像（数据，00，00，00）
static u8 CP_G2[6] ={0xFF,0x13,0x00,0x00,0x00,0x00};   //立体显示颜色（数据，00，00，00）
static u8 SD_LK[6] ={0xFF,0x14,0x00,0x00,0x00,0x00};   //立体显示路况（01有事故/02施工，00，00，00）
static u8 SD_MRXX[6]={0xFF,0x15,0x01,0x00,0x00,0x00};   //立体显示默认

static u8 DZ_K[8]={0x55,0x03,0x01,0x01,0x00,0x00,0x02,0xBB};  //道闸开启
static u8 DZ_G[8]={0x55,0x03,0x01,0x02,0x00,0x00,0x03,0xBB};  //道闸关闭
static u8 DZ_CPF[8] = {0x55, 0x03, 0x10, 0x00, 0x00, 0x00, 0x10, 0xBB}; //车牌前三位（自己计算校验和发送）
static u8 DZ_CPB[8] = {0x55, 0x03, 0x11, 0x00, 0x00, 0x00, 0x11, 0xBB}; //车牌后三位

static u8 DZ_R[8]={0x55,0x03,0x20,0x01,0x00,0x00,0x21,0xBB};  //新道闸数据回传
//static u8 DZ_R[8]={0x55,0x03,0x20,0x01,0x00,0x00,0x01,0xBB};  //新道闸数据回传
static u8 DZ_RK[8]={0x55,0x03,0x01,0x00,0x05,0x00,0x06,0xBB};  //返回闸门开启/

static u8 SMG_SHOW[8]={0x55,0x04,0x01,0x00,0x00,0x00,0x01,0xBB};		//数码管第一排显示
static u8 SMG_SHOWTWO[8]={0x55,0x04,0x02,0x00,0x00,0x00,0x02,0xBB};		//数码管第二排显示 
static u8 SMG_JSG[8]={0x55,0x04,0x03,0x00,0x00,0x00,0x03,0xBB};			//数码管关闭计时
static u8 SMG_JSK[8]={0x55,0x04,0x03,0x01,0x00,0x00,0x04,0xBB};			//数码管开始计时
static u8 SMG_JSZ[8]={0x55,0x04,0x03,0x02,0x00,0x00,0x05,0xBB};			//数码管计时清零
static u8 SMG_JL[8]={0x55,0x04,0x04,0x00,0x00,0x00,0x04,0xBB};			//数码管显示距离

static u8 QRCode[SENDNUM] = {0xFF,0xA0,0x02,0x00,0x00,0x00,0x02,0xF0};//二维码到达点发送指令
static u8 PlateRead[SENDNUM] = {0xFF,0xA0,0x03,0x00,0x00,0x00,0x03,0xF0};//车牌到达点发送指令
static u8 ShapeRead[SENDNUM] = {0xFF,0xA0,0x04,0x00,0x00,0x00,0x04,0xF0};//图形识别到达点发送指令
static u8 TrafficLight[SENDNUM]={0xFF,0xA0,0x05,0x00,0x00,0x00,0x05,0xF0};//智能红绿灯到达发送指令
static u8 GetPoint[SENDNUM] = {0xFF,0xA0,0x06,0x00,0x00,0x00,0x06,0xF0};//发送得到入库点指令
static u8 Pictures_Chose[SENDNUM] = {0xFF,0xA0,0x07,0x00,0x00,0x00,0x07,0xF0};	//图片选择

static u8 LTCK_K[4][8]={{0x55,0x0D,0x01,0x01,0x00,0x00,0x02,0xbb}, //车库一层
												{0x55,0x0D,0x01,0x02,0x00,0x00,0x03,0xbb},  //车库二层
												{0x55,0x0D,0x01,0x03,0x00,0x00,0x04,0xbb},   //车库三层
												{0x55,0x0D,0x01,0x04,0x00,0x00,0x05,0xbb}};  //车库四层
static u8 LTCK_R[8]={0x55,0x0D,0x02,0x01,0x00,0x00,0x03,0xbb};//请求返回小车在第几层
static u8 LTCK_RT[8]={0x55,0x0D,0x02,0x02,0x00,0x00,0x04,0xbb};//请求返回前后测的红外状态

static u8 JTD_READ[8]={0x55,0x0e,0x01,0x00,0x00,0x00,0x01,0xbb}; //交通灯进入识别模式
static u8 JTD_END[8]={0x55,0x0e,0x02,0x03,0x00,0x00,0x03,0xbb};   //识别为红色请求（第四位输入数据/红色01/绿色02/黄色03）
static u8 JTD_RG[8]={0x55,0x0e,0x01,0x01,0x00,0x00,0x01,0xbb};   //第五位输入数据//

static u8 TFT_XS[8]={0x55,0x0b,0x10,0x01,0x00,0x00,0x11,0xbb};//TFT向上翻页
static u8 TFT_XX[8]={0x55,0x0b,0x10,0x02,0x00,0x00,0x12,0xbb};//向下翻页
static u8 TFT_ZDFY[8]={0x55,0x0b,0x10,0x03,0x00,0x00,0x13,0xbb};//自动翻页
static u8 TFT_CPF[8]={0x55,0x0b,0x20,0x00,0x00,0x00,0x20,0xbb};//显示车牌前三位
static u8 TFT_CPB[8]={0x55,0x0b,0x21,0x00,0x00,0x00,0x21,0xbb};//显示车牌后三位
static u8 TFT_G[8]={0x55,0x0b,0x30,0x00,0x00,0x00,0x30,0xbb};//计时器关闭
static u8 TFT_K[8]={0x55,0x0b,0x30,0x01,0x00,0x00,0x31,0xbb};//计时器开始
static u8 TFT_Q[8]={0x55,0x0b,0x30,0x02,0x00,0x00,0x32,0xbb};//计时器清零

static u8 TFT_6W[8]={0x55,0x0b,0x40,0x00,0x00,0x00,0x40,0xbb};//六位显示数据(四五六为，共六位数)
static u8 TFT_JL[8]={0x55,0x0b,0x50,0x00,0x00,0x00,0x50,0xbb};//显示距离模式（四位0x00,五位0x0x，六位0xx）
static u8 TFT_TP[8]={0x55,0x0b,0x10,0x00,0x00,0x00,0x10,0xbb};//显示预留图片（第四位/第几张图片

static u8 FULFILL[8]={0xff,0x03,0x01,0x00,0x00,0x00,0x04,0xf0};//返回完成指令

static u8 Y_K[8]={0x55,0x06,0x20,0x01,0x00,0x00,0x21,0xbb}; //语音随机播报

static u8 VOICE[8]={0x55,0x06,0x10,0x02,0x00,0x00,0x00,0xbb};//语音指令
static u8 MAGLEV[8]={0x55,0x0a,0x01,0x01,0x00,0x00,0x02,0xbb};//无线充电

extern u8 C_Tab[10];	//返回状态数组																															
														
extern u8 zig_send_door_Rev_flag;
extern u8 zig_send_voice_Rev_flag;
extern u16 CodedDisk;

extern int corSpeed;		//循迹调节速度

extern u8 send_Flag;	   // 发送标志位
extern u8 Rx_Flag;
extern u8 step;
extern u8 ctemp;
extern u8 DISTANCE[8];

extern u8 RFID;
extern u8 AVG[8];

struct RFID_Card  //定义在data_base.h里面
{
	u8 RFID_Mode;			//读卡模式
	u8 Area;					//读取的块区		
	u8 RFID_Read_Ok;		//读卡完成
	u8 RFID_Write_Ok;		//写卡完成
	u8 RXRFID[16];			//读卡内容
	u8 RFID_XYD;			//卡片位置
};
extern struct RFID_Card RFID_S50;

typedef struct 
{
	u8 actionsign;//动作标志
	u8 runflag;  //行动标志
	u8 taskflag; //任务标志
	u8 TaskCarryOut;//是否启用任务 不启用则表示任务为延时一秒
}runtimeControl;

extern runtimeControl isrun;

extern u8 getNEWTask(void);

#endif


